---
globs: *lightweight-embedding*
description: Memento 프로젝트의 경량 하이브리드 임베딩 서비스 개발 규칙입니다. TF-IDF + 키워드 매칭 기반 벡터화를 통해 OpenAI 없이도 임베딩 기능을 제공하는 fallback 솔루션의 가이드라인을 제공합니다.
---

# 경량 하이브리드 임베딩 서비스 개발 규칙

## 🎯 개요

경량 하이브리드 임베딩 서비스는 OpenAI API가 없을 때 사용하는 fallback 솔루션입니다. TF-IDF + 키워드 매칭 기반으로 512차원 고정 벡터를 생성하여 의미적 검색을 제공합니다.

## 📁 파일 구조

```
src/services/
├── lightweight-embedding-service.ts    # 메인 서비스 (321줄)
└── test-lightweight-embedding.ts       # 테스트 파일
```

## 🔧 핵심 기능

### 1. TF-IDF 벡터화
- **차원**: 512차원 고정 벡터
- **토큰화**: 한국어/영어 불용어 제거
- **정규화**: 코사인 정규화 적용
- **캐싱**: 24시간 TTL로 결과 캐싱

### 2. 키워드 매칭
- **BM25 스코어**: 키워드 가중치 계산
- **태그 매칭**: 메타데이터 기반 보정
- **타이틀 히트**: 제목 매칭 보너스

### 3. 하이브리드 점수 계산
```typescript
finalScore = (tfidfScore * 0.6) + (keywordScore * 0.4)
```

## 🛠️ 개발 가이드라인

### 서비스 인터페이스
```typescript
interface LightweightEmbeddingService {
  // 임베딩 생성
  generateEmbedding(text: string): Promise<number[]>;
  
  // 유사도 계산
  calculateSimilarity(embedding1: number[], embedding2: number[]): number;
  
  // 검색 점수 계산
  calculateSearchScore(query: string, content: string, tags?: string[]): number;
}
```

### 텍스트 전처리
```typescript
// 한국어/영어 불용어 제거
const stopWords = ['의', '을', '를', '이', '가', '은', '는', 'the', 'a', 'an', 'and', 'or'];

// 토큰화 및 정규화
const tokens = text
  .toLowerCase()
  .replace(/[^\w\s가-힣]/g, ' ')
  .split(/\s+/)
  .filter(token => token.length > 1 && !stopWords.includes(token));
```

### 벡터 생성
```typescript
// TF-IDF 계산
const tf = calculateTermFrequency(tokens);
const idf = calculateInverseDocumentFrequency(tokens, corpus);
const tfidf = tf.map((freq, index) => freq * idf[index]);

// 512차원으로 패딩/트런케이트
const vector = padOrTruncate(tfidf, 512);

// 코사인 정규화
const normalizedVector = cosineNormalize(vector);
```

## 📊 성능 최적화

### 1. 캐싱 전략
- **임베딩 캐시**: 24시간 TTL
- **IDF 캐시**: 7일 TTL
- **어휘 캐시**: 30일 TTL

### 2. 메모리 관리
- **벡터 풀**: 재사용 가능한 벡터 배열
- **가비지 컬렉션**: 주기적 메모리 정리
- **스트리밍**: 대용량 텍스트 처리

### 3. 병렬 처리
- **워커 스레드**: CPU 집약적 작업 분리
- **배치 처리**: 여러 텍스트 동시 처리
- **비동기 처리**: 논블로킹 I/O

## 🧪 테스트 가이드라인

### 단위 테스트
```typescript
describe('LightweightEmbeddingService', () => {
  it('should generate consistent embeddings', async () => {
    const service = new LightweightEmbeddingService();
    const text = 'React Hook 사용법';
    
    const embedding1 = await service.generateEmbedding(text);
    const embedding2 = await service.generateEmbedding(text);
    
    expect(embedding1).toEqual(embedding2);
  });
  
  it('should calculate similarity correctly', async () => {
    const service = new LightweightEmbeddingService();
    const text1 = 'React Hook 사용법';
    const text2 = 'React Hook 활용 방법';
    
    const embedding1 = await service.generateEmbedding(text1);
    const embedding2 = await service.generateEmbedding(text2);
    const similarity = service.calculateSimilarity(embedding1, embedding2);
    
    expect(similarity).toBeGreaterThan(0.7);
  });
});
```

### 통합 테스트
```typescript
describe('LightweightEmbedding Integration', () => {
  it('should work as fallback for OpenAI', async () => {
    // OpenAI API 실패 시나리오
    const embeddingService = new EmbeddingService();
    const lightweightService = new LightweightEmbeddingService();
    
    // 자동 fallback 테스트
    const result = await embeddingService.generateEmbedding('test text');
    expect(result).toBeDefined();
  });
});
```

## 🔍 디버깅 가이드

### 로그 레벨
- **DEBUG**: 벡터 생성 과정
- **INFO**: 캐시 히트/미스
- **WARN**: 성능 저하 경고
- **ERROR**: 임베딩 생성 실패

### 성능 메트릭
- **처리 시간**: 평균 임베딩 생성 시간
- **메모리 사용량**: 벡터 저장소 크기
- **캐시 히트율**: 캐시 효율성
- **정확도**: 검색 결과 품질

## 🚀 배포 고려사항

### 환경 변수
```bash
# 경량 임베딩 설정
LIGHTWEIGHT_EMBEDDING_ENABLED=true
LIGHTWEIGHT_EMBEDDING_DIMENSION=512
LIGHTWEIGHT_EMBEDDING_CACHE_TTL=86400
LIGHTWEIGHT_EMBEDDING_WORKER_THREADS=4
```

### 모니터링
- **CPU 사용률**: 벡터 계산 부하
- **메모리 사용량**: 캐시 크기 모니터링
- **응답 시간**: 임베딩 생성 지연
- **에러율**: 처리 실패 비율

## 📚 참고 자료

- [TF-IDF 알고리즘](https://en.wikipedia.org/wiki/Tf%E2%80%93idf)
- [BM25 랭킹 함수](https://en.wikipedia.org/wiki/Okapi_BM25)
- [코사인 유사도](https://en.wikipedia.org/wiki/Cosine_similarity)
- [Node.js Worker Threads](https://nodejs.org/api/worker_threads.html)