---
globs: *.ts,*.js
description: 캐시 서비스 개발 규칙
---

# 캐시 관리 서비스 개발 규칙

## 🗄️ 캐시 서비스 아키텍처

### 핵심 컴포넌트

#### 1. Cache Service (`src/services/cache-service.ts` - 352줄)
- **LRU 캐시 구현**: 최근 사용 항목 우선 유지
- **TTL 관리**: 시간 기반 캐시 만료
- **메모리 효율적 관리**: 캐시 크기 제한 및 정리
- **통계 수집**: 캐시 성능 메트릭 제공

#### 2. 캐시 타입별 관리
- **검색 결과 캐시**: 검색 성능 향상
- **임베딩 캐시**: 임베딩 생성 비용 절약
- **메타데이터 캐시**: 자주 접근하는 데이터
- **세션 캐시**: 사용자 세션 정보

## 🔧 캐시 구현 가이드라인

### LRU 캐시 구현
```typescript
interface LRUCache<T> {
  maxSize: number;
  ttl: number;
  get(key: string): T | null;
  set(key: string, value: T): void;
  delete(key: string): boolean;
  clear(): void;
  size(): number;
}
```

### TTL 관리
- **검색 결과**: 1시간 (3600초)
- **임베딩**: 24시간 (86400초)
- **메타데이터**: 30분 (1800초)
- **세션**: 2시간 (7200초)

### 캐시 키 전략
- **검색 결과**: `search:${hash(query)}`
- **임베딩**: `embedding:${hash(text)}`
- **메타데이터**: `meta:${type}:${id}`
- **세션**: `session:${sessionId}`

## 📊 캐시 성능 메트릭

### 주요 지표
- **캐시 히트율**: 80% 이상 목표
- **캐시 크기**: 메모리 사용량 제한
- **평균 응답 시간**: 캐시된 데이터 접근 시간
- **캐시 정리 빈도**: 만료된 항목 제거 빈도

### 모니터링
- **실시간 통계**: 현재 캐시 상태
- **히스토리 추적**: 성능 변화 추이
- **알림 설정**: 임계값 초과 시 알림
- **리포트 생성**: 정기적인 성능 리포트

## 🚀 캐시 최적화 전략

### 메모리 최적화
1. **크기 제한**: 최대 캐시 크기 설정
2. **자동 정리**: 만료된 항목 자동 제거
3. **우선순위**: 중요한 데이터 우선 유지
4. **압축**: 대용량 데이터 압축 저장

### 성능 최적화
1. **병렬 처리**: 동시 캐시 접근 처리
2. **배치 작업**: 대량 캐시 작업 최적화
3. **지연 로딩**: 필요 시에만 데이터 로드
4. **예측적 캐싱**: 자주 사용될 데이터 미리 캐싱

### 안정성 보장
1. **에러 처리**: 캐시 실패 시 대체 방안
2. **데이터 일관성**: 캐시와 원본 데이터 동기화
3. **복구 메커니즘**: 캐시 손상 시 자동 복구
4. **백업 전략**: 중요한 캐시 데이터 백업

## 🔍 캐시 디버깅

### 일반적인 문제
- **캐시 미스**: 캐시 키 불일치 또는 만료
- **메모리 누수**: 캐시 크기 제한 초과
- **성능 저하**: 캐시 히트율 낮음
- **데이터 불일치**: 캐시와 원본 데이터 차이

### 디버깅 도구
- **캐시 통계**: 현재 캐시 상태 확인
- **로그 분석**: 캐시 접근 패턴 분석
- **프로파일링**: 캐시 성능 측정
- **모니터링**: 실시간 캐시 상태 추적

## 📋 캐시 정책

### 저장 정책
- **자동 저장**: 자주 접근하는 데이터 자동 캐싱
- **수동 저장**: 사용자 요청에 의한 캐싱
- **조건부 저장**: 특정 조건 만족 시 캐싱
- **우선순위 저장**: 중요한 데이터 우선 캐싱

### 만료 정책
- **시간 기반**: TTL 만료 시 자동 삭제
- **크기 기반**: 캐시 크기 초과 시 오래된 항목 삭제
- **사용 기반**: 사용하지 않는 항목 우선 삭제
- **수동 삭제**: 사용자 요청에 의한 삭제

### 동기화 정책
- **즉시 동기화**: 데이터 변경 시 즉시 캐시 업데이트
- **지연 동기화**: 주기적으로 캐시 동기화
- **조건부 동기화**: 특정 조건에서만 동기화
- **수동 동기화**: 사용자 요청에 의한 동기화

## 🧪 캐시 테스트

### 단위 테스트
- **기본 기능**: 캐시 저장/조회/삭제 테스트
- **TTL 테스트**: 시간 기반 만료 테스트
- **크기 제한**: 최대 크기 초과 시 동작 테스트
- **에러 처리**: 예외 상황 처리 테스트

### 성능 테스트
- **부하 테스트**: 높은 부하에서의 캐시 성능
- **동시성 테스트**: 동시 접근 시 안정성
- **메모리 테스트**: 메모리 사용량 측정
- **응답 시간**: 캐시 접근 응답 시간 측정

### 통합 테스트
- **전체 시스템**: 캐시와 다른 컴포넌트 연동 테스트
- **데이터 일관성**: 캐시와 원본 데이터 일치성 확인
- **장애 복구**: 캐시 실패 시 대체 방안 테스트
- **성능 영향**: 캐시 도입 시 전체 성능 영향 측정

## 📈 캐시 모니터링

### 실시간 모니터링
- **캐시 크기**: 현재 사용 중인 메모리
- **히트율**: 캐시 성공률
- **응답 시간**: 캐시 접근 속도
- **에러율**: 캐시 관련 에러 발생률

### 알림 설정
- **히트율 저하**: 70% 미만 시 경고
- **메모리 사용량**: 90% 초과 시 경고
- **응답 시간**: 100ms 초과 시 경고
- **에러율**: 5% 초과 시 경고

### 리포트 생성
- **일일 리포트**: 캐시 성능 요약
- **주간 리포트**: 성능 트렌드 분석
- **월간 리포트**: 장기 성능 변화
- **특별 리포트**: 문제 발생 시 상세 분석

## 🎯 캐시 목표

### 성능 목표
- **캐시 히트율**: 80% 이상
- **평균 응답 시간**: 10ms 이하
- **메모리 사용량**: 100MB 이하
- **에러율**: 1% 이하

### 가용성 목표
- **캐시 가용성**: 99.9% 이상
- **데이터 일관성**: 99.99% 이상
- **복구 시간**: 5분 이하
- **데이터 손실**: 0%