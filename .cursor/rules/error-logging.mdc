---
globs: *error-logging*
description: Memento 프로젝트의 에러 로깅 시스템 개발 규칙입니다. 구조화된 에러 로깅, 통계 수집, 해결 추적을 통한 시스템 안정성 향상을 위한 가이드라인을 제공합니다.
---

# 에러 로깅 시스템 개발 규칙

## 🎯 개요

에러 로깅 시스템은 Memento MCP Server의 안정성을 보장하기 위한 핵심 컴포넌트입니다. 구조화된 에러 로깅, 통계 수집, 해결 추적을 통해 시스템의 신뢰성을 향상시킵니다.

## 📁 파일 구조

```
src/services/
├── error-logging-service.ts    # 메인 서비스
└── test-error-logging.ts       # 테스트 파일
```

## 🔧 핵심 기능

### 1. 구조화된 에러 로깅
- **심각도 분류**: LOW, MEDIUM, HIGH, CRITICAL
- **카테고리 분류**: DATABASE, NETWORK, TOOL_EXECUTION, VALIDATION, SYSTEM
- **컨텍스트 정보**: 사용자 ID, 작업 유형, 타임스탬프
- **스택 트레이스**: 상세한 에러 정보

### 2. 에러 통계 수집
- **심각도별 통계**: 에러 분포 분석
- **카테고리별 통계**: 문제 영역 식별
- **시간별 통계**: 트렌드 분석
- **해결률 통계**: 처리 효율성 측정

### 3. 에러 해결 추적
- **해결 상태 관리**: PENDING, IN_PROGRESS, RESOLVED
- **해결자 추적**: 담당자 식별
- **해결 방법 기록**: 문제 해결 과정
- **재발 방지**: 근본 원인 분석

## 🛠️ 개발 가이드라인

### 서비스 인터페이스
```typescript
interface ErrorLoggingService {
  // 에러 로깅
  logError(
    error: Error,
    severity: ErrorSeverity,
    category: ErrorCategory,
    context?: Record<string, any>
  ): void;
  
  // 에러 통계 조회
  getErrorStats(filters?: ErrorFilters): Promise<ErrorStats>;
  
  // 에러 해결
  resolveError(
    errorId: string,
    resolvedBy: string,
    resolution?: string
  ): Promise<boolean>;
  
  // 에러 검색
  searchErrors(filters: ErrorSearchFilters): Promise<ErrorLog[]>;
}
```

### 에러 심각도 정의
```typescript
enum ErrorSeverity {
  LOW = 'LOW',           // 정보성 에러 (로깅만)
  MEDIUM = 'MEDIUM',     // 경고성 에러 (모니터링)
  HIGH = 'HIGH',         // 심각한 에러 (알림 필요)
  CRITICAL = 'CRITICAL'  // 치명적 에러 (즉시 대응)
}
```

### 에러 카테고리 정의
```typescript
enum ErrorCategory {
  UNKNOWN = 'UNKNOWN',           // 알 수 없는 에러
  DATABASE = 'DATABASE',         // 데이터베이스 관련
  NETWORK = 'NETWORK',           // 네트워크 관련
  TOOL_EXECUTION = 'TOOL_EXECUTION', // 도구 실행 관련
  VALIDATION = 'VALIDATION',     // 입력 검증 관련
  SYSTEM = 'SYSTEM'              // 시스템 관련
}
```

### 에러 로깅 예시
```typescript
// 기본 에러 로깅
errorLoggingService.logError(
  new Error('Database connection failed'),
  ErrorSeverity.HIGH,
  ErrorCategory.DATABASE,
  {
    operation: 'memory_search',
    userId: 'user123',
    timestamp: new Date().toISOString()
  }
);

// 복잡한 에러 로깅
try {
  await riskyOperation();
} catch (error) {
  errorLoggingService.logError(
    error instanceof Error ? error : new Error(String(error)),
    ErrorSeverity.CRITICAL,
    ErrorCategory.SYSTEM,
    {
      operation: 'memory_creation',
      userId: 'user456',
      memoryId: 'memory-789',
      stackTrace: error.stack,
      additionalContext: {
        memoryType: 'episodic',
        contentLength: content.length
      }
    }
  );
}
```

## 📊 통계 및 분석

### 에러 통계 구조
```typescript
interface ErrorStats {
  totalErrors: number;
  errorsBySeverity: Record<ErrorSeverity, number>;
  errorsByCategory: Record<ErrorCategory, number>;
  errorsByHour: Record<number, number>;
  resolutionRate: number;
  averageResolutionTime: number;
  topErrors: Array<{
    message: string;
    count: number;
    lastOccurred: Date;
  }>;
}
```

### 통계 조회 예시
```typescript
// 전체 통계
const stats = await errorLoggingService.getErrorStats();

// 필터링된 통계
const highErrors = await errorLoggingService.getErrorStats({
  severity: ErrorSeverity.HIGH,
  hours: 24
});

// 카테고리별 통계
const dbErrors = await errorLoggingService.getErrorStats({
  category: ErrorCategory.DATABASE,
  limit: 10
});
```

## 🔍 에러 해결 워크플로우

### 1. 에러 발견
```typescript
// 에러 로깅 시 자동으로 해결 대기 상태로 설정
const errorId = errorLoggingService.logError(error, severity, category, context);
```

### 2. 에러 분석
```typescript
// 에러 상세 정보 조회
const errorDetails = await errorLoggingService.getErrorDetails(errorId);

// 관련 에러 검색
const relatedErrors = await errorLoggingService.searchErrors({
  message: errorDetails.message,
  category: errorDetails.category,
  timeRange: '24h'
});
```

### 3. 에러 해결
```typescript
// 에러 해결 처리
const resolved = await errorLoggingService.resolveError(
  errorId,
  'admin',
  '데이터베이스 연결 풀 크기 증가로 해결'
);

// 해결 확인
if (resolved) {
  console.log('에러가 성공적으로 해결되었습니다.');
}
```

## 🧪 테스트 가이드라인

### 단위 테스트
```typescript
describe('ErrorLoggingService', () => {
  let service: ErrorLoggingService;
  
  beforeEach(() => {
    service = new ErrorLoggingService();
  });
  
  it('should log error with correct severity', () => {
    const error = new Error('Test error');
    service.logError(error, ErrorSeverity.HIGH, ErrorCategory.SYSTEM);
    
    const stats = service.getErrorStats();
    expect(stats.errorsBySeverity[ErrorSeverity.HIGH]).toBe(1);
  });
  
  it('should resolve error correctly', async () => {
    const error = new Error('Test error');
    service.logError(error, ErrorSeverity.MEDIUM, ErrorCategory.VALIDATION);
    
    const errors = service.searchErrors({ limit: 1 });
    const errorId = errors[0].id;
    
    const resolved = await service.resolveError(errorId, 'test_user', 'Test resolution');
    expect(resolved).toBe(true);
  });
});
```

### 통합 테스트
```typescript
describe('ErrorLogging Integration', () => {
  it('should integrate with MCP server', async () => {
    const server = new MCPServer();
    const errorService = new ErrorLoggingService();
    
    // 서버에 에러 로깅 서비스 연결
    server.setErrorLogger(errorService);
    
    // 에러 발생 시나리오
    try {
      await server.executeTool('invalid_tool', {});
    } catch (error) {
      // 에러가 자동으로 로깅되는지 확인
      const stats = errorService.getErrorStats();
      expect(stats.totalErrors).toBeGreaterThan(0);
    }
  });
});
```

## 📈 모니터링 및 알림

### 실시간 모니터링
```typescript
// 에러 발생 시 실시간 알림
errorLoggingService.on('error', (errorLog) => {
  if (errorLog.severity === ErrorSeverity.CRITICAL) {
    // 즉시 알림 전송
    alertService.sendCriticalAlert(errorLog);
  }
});
```

### 대시보드 메트릭
- **에러 발생률**: 시간당 에러 수
- **해결률**: 해결된 에러 비율
- **평균 해결 시간**: 에러 해결 소요 시간
- **심각도 분포**: 에러 심각도별 분포

## 🚀 배포 고려사항

### 환경 변수
```bash
# 에러 로깅 설정
ERROR_LOGGING_ENABLED=true
ERROR_LOGGING_LEVEL=INFO
ERROR_LOGGING_RETENTION_DAYS=30
ERROR_LOGGING_ALERT_THRESHOLD=10
```

### 로그 저장소
- **로컬 파일**: 개발 환경
- **데이터베이스**: 프로덕션 환경
- **외부 서비스**: ELK Stack, Splunk 등

### 성능 최적화
- **비동기 로깅**: 논블로킹 에러 로깅
- **배치 처리**: 여러 에러를 한 번에 처리
- **압축**: 오래된 로그 압축 저장

## 📚 참고 자료

- [Node.js Error Handling](https://nodejs.org/api/errors.html)
- [Winston Logger](https://github.com/winstonjs/winston)
- [Structured Logging](https://www.elastic.co/guide/en/ecs/current/index.html)
- [Error Monitoring Best Practices](https://sentry.io/for/error-monitoring/)