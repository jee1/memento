---
globs: *.ts,*.js
description: 성능 모니터링 및 최적화 서비스 개발 규칙
---

# 성능 모니터링 및 최적화 서비스 개발 규칙

## 📊 성능 모니터링 서비스

### 핵심 컴포넌트

#### 1. Performance Monitor (`src/services/performance-monitor.ts` - 367줄)
- **실시간 메트릭 수집**: 메모리, CPU, 데이터베이스 성능 모니터링
- **임계값 모니터링**: 설정된 임계값 초과 시 알림
- **성능 리포트 생성**: 트렌드 분석 및 성능 개선 제안
- **시스템 상태 모니터링**: 전체 시스템 상태 추적

#### 2. Cache Service (`src/services/cache-service.ts` - 352줄)
- **LRU 캐시 구현**: 최근 사용 항목 우선 유지
- **TTL 관리**: 시간 기반 캐시 만료
- **검색 결과 캐싱**: 검색 성능 향상
- **임베딩 캐싱**: 임베딩 생성 비용 절약
- **메모리 효율적 관리**: 캐시 크기 제한 및 정리

#### 3. Database Optimizer (`src/services/database-optimizer.ts` - 442줄)
- **자동 인덱스 추천**: 쿼리 패턴 분석 기반
- **쿼리 성능 분석**: 느린 쿼리 식별 및 최적화
- **데이터베이스 성능 튜닝**: 설정 최적화
- **통계 수집**: 성능 개선 지표 제공

#### 4. Async Optimizer (`src/services/async-optimizer.ts` - 447줄)
- **워커 풀 관리**: 병렬 처리 최적화
- **우선순위 기반 작업 큐**: 중요한 작업 우선 처리
- **배치 처리**: 대량 데이터 효율적 처리
- **재시도 로직**: 실패한 작업 자동 재시도

## 🧪 성능 테스트

### 벤치마크 테스트 (`src/test/performance-benchmark.ts` - 497줄)
- **종합 성능 벤치마크**: 전체 시스템 성능 측정
- **메모리 저장 성능**: 기억 저장 속도 테스트
- **검색 성능**: 검색 응답 시간 측정
- **캐시 성능**: 캐시 히트율 및 응답 시간
- **동시성 테스트**: 동시 요청 처리 능력
- **부하 테스트**: 높은 부하 상황에서의 성능

### 모니터링 테스트 (`src/test-performance-monitoring.ts` - 172줄)
- **모니터링 도구 기능 검증**: 각 모니터링 기능 테스트
- **실시간 성능 지표 확인**: 메트릭 수집 정확성 검증
- **통합 모니터링 시스템 테스트**: 전체 모니터링 파이프라인 검증

## 📈 성능 지표

### 메모리 성능
- **힙 사용량**: 11-15MB (일반적인 사용)
- **RSS 메모리**: 프로세스 실제 메모리 사용량
- **가비지 컬렉션**: GC 빈도 및 소요 시간

### 데이터베이스 성능
- **평균 쿼리 시간**: 0.16-0.22ms
- **인덱스 활용률**: 쿼리 최적화 정도
- **연결 풀 상태**: 활성/대기 연결 수

### 검색 성능
- **평균 검색 시간**: 0.78-4.24ms (캐시 효과 포함)
- **캐시 히트율**: 검색 결과 캐시 효율성
- **벡터 검색 성능**: 임베딩 검색 속도

### 캐시 성능
- **캐시 크기**: 메모리 사용량 제한
- **캐시 히트율**: 캐시 효과성 측정
- **캐시 정리**: 만료된 항목 자동 제거

## 🔧 성능 최적화 가이드라인

### 메모리 최적화
1. **연결 풀 관리**: 데이터베이스 연결 재사용
2. **캐시 크기 제한**: 메모리 사용량 제어
3. **가비지 컬렉션**: 불필요한 객체 정리
4. **스트리밍 처리**: 대용량 데이터 처리

### 데이터베이스 최적화
1. **인덱스 활용**: 적절한 인덱스 생성
2. **쿼리 최적화**: 효율적인 쿼리 작성
3. **배치 처리**: 대량 데이터 처리
4. **연결 관리**: 연결 풀 최적화

### 검색 최적화
1. **캐시 활용**: 검색 결과 캐싱
2. **인덱스 최적화**: FTS5 및 벡터 인덱스
3. **병렬 처리**: 동시 검색 처리
4. **결과 제한**: 불필요한 데이터 로딩 방지

## 🚨 모니터링 알림

### 임계값 설정
- **메모리 사용량**: 80% 초과 시 경고
- **CPU 사용률**: 90% 초과 시 경고
- **데이터베이스 연결**: 90% 초과 시 경고
- **응답 시간**: 1초 초과 시 경고

### 알림 처리
1. **로그 기록**: 상세한 에러 로그
2. **메트릭 수집**: 성능 데이터 저장
3. **자동 복구**: 일부 문제 자동 해결
4. **수동 개입**: 심각한 문제 시 알림

## 📊 성능 리포트

### 일일 리포트
- **전체 성능 요약**: 주요 지표 요약
- **트렌드 분석**: 성능 변화 추이
- **문제점 식별**: 성능 저하 원인
- **개선 제안**: 최적화 방안 제시

### 주간 리포트
- **성능 트렌드**: 장기 성능 변화
- **용량 계획**: 리소스 사용량 예측
- **최적화 효과**: 개선 사항 효과 측정
- **향후 계획**: 추가 최적화 방안

## 🔍 디버깅 가이드

### 성능 문제 진단
1. **메트릭 확인**: 현재 성능 지표 확인
2. **로그 분석**: 에러 및 경고 로그 검토
3. **프로파일링**: 코드 실행 시간 분석
4. **리소스 모니터링**: 시스템 리소스 사용량 확인

### 일반적인 문제 해결
- **메모리 누수**: 가비지 컬렉션 및 객체 정리
- **느린 쿼리**: 인덱스 추가 및 쿼리 최적화
- **높은 CPU 사용률**: 비효율적인 코드 최적화
- **캐시 미스**: 캐시 전략 조정

## 🎯 성능 목표

### 응답 시간 목표
- **기억 저장**: < 100ms
- **기억 검색**: < 50ms
- **기억 삭제**: < 50ms
- **API 응답**: < 200ms

### 처리량 목표
- **동시 연결**: 최대 1000개
- **초당 요청**: 최대 1000 RPS
- **메모리 효율성**: < 100MB 힙 사용량
- **가용성**: 99.9% 업타임